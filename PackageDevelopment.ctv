<CRANTaskView>
  <name>PackageDevelopment</name>
  <topic>Package Development</topic>
  <maintainer email="thosjleeper@gmail.com">Thomas J. Leeper</maintainer>
  <version>2015-05-01</version>
  <info>
    <p>Packages provide a mechanism for loading optional code, data, and documentation as needed. At the very minimum only a text editor and an R installation are needed for package creation. Nonetheless many useful tools and R packages themselves have been provided to ease or improve package development. This Task View focuses on these tools/R packages, grouped by topics.</p>
    <p>The main reference for packages development is the <a href="http://cran.r-project.org/doc/manuals/R-exts.html">&quot;Writing R Extension&quot;</a> manual. For further documentation and tutorials, see the &quot;Related links&quot; section below.</p>
    <p>If you think that some packages or tools are missing from the list, feel free to <script type="text/javascript">
    <!--
    h='&#x67;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#x6f;&#x6d;';a='&#64;';n='&#108;&#98;&#114;&#x61;&#x67;&#108;&#x69;&#x61;';e=n+a+h;
    document.write('<a h'+'ref'+'="ma'+'ilto'+':'+e+'" clas'+'s="em' + 'ail">'+'e-mail'+'<\/'+'a'+'>');
    // -->
    </script><noscript>&#x65;&#x2d;&#x6d;&#x61;&#x69;&#108;&#32;&#40;&#108;&#98;&#114;&#x61;&#x67;&#108;&#x69;&#x61;&#32;&#x61;&#116;&#32;&#x67;&#x6d;&#x61;&#x69;&#108;&#32;&#100;&#x6f;&#116;&#32;&#x63;&#x6f;&#x6d;&#x29;</noscript> me or contribute directly to the Task View by submitting a pull request on <a href="http://github.com/lbraglia/PackageDevelopmentTaskView/blob/master/CONTRIBUTING.md">GitHub</a>.</p>
    <p>Many thanks to Cristophe Dutang, Darren Norris, Dirk Eddelbuettel, Gabor Grothendieck, Gregory Jefferis, John Maindonald, Luca Braglia, Spencer Graves, Tobias Verbeke, and the R-core team for contributions.</p>
    <h3 id="first-steps">First steps</h3>
    <p><strong>Searching for Existing Packages</strong></p>
    <p>Before starting a new package it's worth searching for already available packages, both from a developer's standpoint (&quot;do not reinvent the wheel&quot;) and from a user's one (many packages implementing same/similar procedures can be confusing). If a package addressing the same functionality already exists, you may consider contributing at it instead of starting a new one. If you're looking to create a package, but want idea for what sorts of packages are in demand, the <a href="https://ropensci.org/">rOpenSci</a> maintains <a href="https://github.com/ropensci/wishlist">a wishlist for science-related packages</a> and <a href="https://github.com/ropensci/webservices/wiki/ToDo">a TODO list of web services and data APIs in need of packaging</a>.</p>
    <ul>
    <li><code>utils::RSiteSearch</code> allows to search for keywords/phrases in help pages (all the CRAN packages except those for Windows only and some from Bioconductor), vignettes or task views, using the search engine at <a href="http://search.r-project.org" class="uri">http://search.r-project.org</a>. A convenient wrapper around <code>RSiteSearch</code> that adds hits ranking is <code>findFn</code> function, from <pkg>sos</pkg>.</li>
    <li><a href="http://rseek.org/">RSeek</a> allows to search for keywords/phrases in books, task views, support lists, function/packages, blogs etc.</li>
    <li><a href="http://rdocumentation.org/">Rdocumentation</a> allows to search for keywords/phrases in help pages for all CRAN and some Bioconductor/GitHub packages.</li>
    <li><a href="http://crantastic.org/">Crantastic!</a> maintains an up-to-date and tagged directory of packages on CRAN. The <a href="http://mran.revolutionanalytics.com/">Managed R Archive Network</a> from Revolution Analytics is a CRAN mirror that additionally provides visualizations of package dependency trees.</li>
    </ul>
    <p><strong>Initializing an R package</strong></p>
    <ul>
    <li><code>utils::package.skeleton</code> automates some of the setup for a new source package. It creates directories, saves functions, data, and R code files provided to appropriate places, and creates skeleton help files and a <code>Read-and-delete-me</code> file describing further steps in packaging</li>
    <li><code>kitten</code> from <pkg>pkgKitten</pkg> allows one to specify the main <code>DESCRIPTION</code> entries and doesn't create source code and data files from global environment objects or sourced files. It's used to initialize a simple package that passes <code>R CMD check</code> cleanly.</li>
    <li><code>create</code> from <pkg>devtools</pkg> is similar to <code>package.skeleton</code> except it allows to specify <code>DESCRIPTION</code> entries and doesn't create source code and data files from global environment objects or sourced files.</li>
    <li><code>Rcpp.package.skeleton</code> from <pkg>Rcpp</pkg> adds to <code>package.skeleton</code> the C++ via <code>Rcpp</code> handling, by modifying eg. <code>DESCRIPTION</code> and <code>NAMESPACE</code> accordingly, creating examples if needed and allowing the user to specify (with a character vector of paths) which C++ files to include in <code>src</code> directory . Finally the user can decide main <code>DESCRIPTION</code> entries.</li>
    </ul>
    <p><strong>Programming Paradigms</strong></p>
    <p>R is first a functional programming language, but has three built-in forms of object-oriented programming as well as additional object-oriented paradigms available in add-on packages.</p>
    <ul>
    <li>The built-in S3 classes involve wherein a generic function (e.g., <code>summary</code>) employs a distinct method for an object of a given class (i.e., it is possible to implement class-specific methods for a given generic function). If a package implements new object classes, it is common to implement methods for commonly used generics such as <code>print</code>, <code>summary</code>, etc. These methods must be registered in the package's NAMESPACE file. <pkg>R.methodsS3</pkg> aims to simplify the creation of S3 generic functions and S3 methods.</li>
    <li>S4 is a more formalized form of object orientation that is available through <code>methods</code>. S4 classes have formal definitions and can dispatch methods based on multiple arguments (not just the first argument, as in S3). S4 is notable for its use of the <code>@</code> symbol to extract slots from S4 objects. John Chambers's <a href="http://developer.r-project.org/howMethodsWork.pdf">&quot;How S4 Methods Work&quot;</a> tutorial may serve as a useful introduction.</li>
    <li>Reference classes were introduced in R2.12.0 and are also part of <code>methods</code>. They offer a distinct paradigm from S3 and S4 due to the fact that reference class objects are mutable and that methods belong to objects, not generic functions.</li>
    <li><pkg>aoos</pkg> and <pkg>R.oo</pkg> are other packages facilitating object-oriented programming. <pkg>R6</pkg> (<a href="https://github.com/wch/R6">Github</a>) provides an alternative to reference classes without a dependency on <code>methods</code>.</li>
    </ul>
    <p>Another feature of R is the ability to rely on both standard and non-standard evaluation of function arguments. Non-standard evaluation is seen in commonly used functions like <code>library</code> and <code>subset</code> and can also be used in packages.</p>
    <ul>
    <li><code>substitute()</code> provides the most straightforward interface to non-standard evaluation of function arguments.</li>
    <li><pkg>lazyeval</pkg> (<a href="https://github.com/hadley/lazyeval">Github</a>) aims to help developers design packages with parallel function implementations that follow both standard and non-standard evaluation.</li>
    <li>An increasingly popular form of non-standard evaluation involves chained expressions or &quot;pipelines&quot;. <pkg>magrittr</pkg> provides the <code>%&gt;%</code> chaining operator that passes the results of one expression evaluation to the next expression in the chain, as well as other similar piping operators. <pkg>pipeR</pkg> offers a larger set of pipe operators.</li>
    </ul>
    <h3 id="source-code">Source Code</h3>
    <p><strong>Foreign Languages Interfaces</strong></p>
    <ul>
    <li><pkg>inline</pkg> eases adding code in C, C++, or Fortran to R. It takes care of the compilation, linking and loading of embedded code segments that are stored as R strings.</li>
    <li><pkg>Rcpp</pkg> offers a number of C++ classes that makes transferring R objects to C++ functions (and back) easier.</li>
    <li><pkg>rJava</pkg> package provides a low-level interface to Java similar to the <code>.Call</code> interface for C and C++.</li>
    <li><pkg>rPython</pkg> and <pkg>rJython</pkg> provide interfaces to python.</li>
    <li><pkg>V8</pkg> offers an embedded Javascript engine, useful for building packages around Javascript libraries. <pkg>js</pkg> provides additional tools for working with Javascript code.</li>
    </ul>
    <p>Writing packages that involve compiled code requires a developer toolchain. If developing on Windows, this requires <a href="http://cran.r-project.org/bin/windows/Rtools/">Rtools</a>, which is updated with each R minor release.</p>
    <p><strong>Debugging</strong></p>
    <p><strong>Code Analysis</strong></p>
    <ul>
    <li>The <pkg>codetools</pkg> package.</li>
    </ul>
    <p><strong>Profiling</strong></p>
    <ul>
    <li>Profiling data is provided by <code>utils::Rprof</code> and can be summarized by <code>utils::summaryRprof</code></li>
    <li><pkg>profr</pkg> can visualize output from the <code>Rprof</code> interface for profiling.</li>
    <li><pkg>proftools</pkg> and <pkg>aprof</pkg> can also be used to analyze profiling output.</li>
    </ul>
    <p><strong>Benchmarking</strong></p>
    <ul>
    <li><code>base::system.time</code> is a basic timing utility</li>
    <li><pkg>microbenchmark</pkg></li>
    <li><pkg>rbenchmark</pkg></li>
    </ul>
    <p><strong>Unit Testing</strong></p>
    <ul>
    <li>R documentation files can contain demonstrative examples of package functionality. Complete testing of correct package performance is better reserved for the <code>test</code> directory. Several packages provide testing functionality, including <pkg>RUnit</pkg>, <pkg>svUnit</pkg>, and <pkg>testthat</pkg>.</li>
    </ul>
    <p><strong>Internationalization and Localization</strong></p>
    <ul>
    <li>There is no standard mechanism for translation of package documentation into languages other than English. To create non-English documentation requires manual creation of supplemental .Rd files or package vignettes. Packages supplying non-English documentation should include a <code>Language</code> field in the DESCRIPTION file.</li>
    <li>R provides useful features for the localization of diagnostic messages, warnings, and errors from functions at both the C and R levels based on GNU <code>gettext</code>. <a href="http://developer.r-project.org/Translations30.html">&quot;Translating R Messages&quot;</a> describes the process of creating and installing message translations.</li>
    </ul>
    <p><strong>Creating Graphical Interfaces</strong></p>
    <ul>
    <li>For simple interactive interfaces, <code>readline()</code> can be used to create a simple prompt, while <code>utils::menu()</code>, <code>utils::select.list()</code> can provide graphical and console-based selection of items from a list, and <code>utils::txtProgressBar()</code> provides a simple text progress bar.</li>
    <li><code>tcltk</code> is an R base package that provides a large set of tools for creating interfaces uses tcl/tk (most functions are thin wrappers around corresponding tcl and tk functions), though the documentation is sparse. <pkg>tcltk2</pkg> provides additional widgets and functionality. <pkg>qtbase</pkg> provides bindings for Qt. <ohat>RGtk</ohat> (not on CRAN) provides bindings for Gtk and gnome. <pkg>gWidgets2</pkg> offers a language-independent API for building graphical user interfaces in Gtk, Qt, or tcl/tk.</li>
    <li><pkg>Shiny</pkg> provides a browser-based infrastructure for creating dashboards and interfaces for R functionality.</li>
    </ul>
    <h3 id="documentation">Documentation</h3>
    <p><strong>Writing Package Documentation</strong></p>
    <p>Package documentation is written in a TeX-like format as .Rd files that are stored in the <code>man</code> subdirectory of a package. These files are compiled to plain text, HTML, or PDF by R as needed.</p>
    <ul>
    <li>One can write .Rd files directly. A popular alternative is to rely on <pkg>roxygen2</pkg>, which uses special markup in R source files to generate documentation files before a package is built. This functionality is provided by <code>roxygen2::roxygenise()</code> and underlies <code>devtools::document()</code>. roxygen2 eliminates the need to learn <em>some</em> of the formatting requirements of an .Rd file at the cost of adding a step to the development process (the need to roxygenise before calling <code>R CMD build</code>).</li>
    <li><pkg>Rd2roxygen</pkg> can convert existing .Rd files to roxygen source documentation, facilitating the conversion of existing documentation to an roxygen workflow.</li>
    <li><code>tools::parse_Rd()</code> can be used to manipulate the contents of an .Rd file. <code>tools::checkRd()</code> is useful for validating an .Rd file. Duncan Murdoch's <a href="https://developer.r-project.org/parseRd.pdf">&quot;Parsing Rd files&quot;</a> tutorial is a useful reference for advanced use of R documentation. <pkg>Rdpack</pkg> provides additional tools for manipulating documentation files.</li>
    </ul>
    <p><strong>Writing Vignettes</strong></p>
    <p>Package vignettes provides additional documentation of package functionality that is not tied to a specific function (as in an .Rd file). Historically, vignettes were used to explain the statistical or computational approach taken by a package in an article-like format that would be rendered as a PDF document using <code>Sweave</code>. Since R 3.0.0, non-Sweave vignette engines have also been supported, including <pkg>knitr</pkg>, which can produce Sweave-like PDF vignettes but can also support HTML vignettes that are written in R-flavored markdown. To use a non-Sweave vignette engine, the vignette needs to start with a code block indicating the package and function to be used:</p>
    <pre><code>%\VignetteEngine{knitr::knitr}
    %\VignetteIndexEntry{}</code></pre>
    <p><strong>Spell Checking</strong></p>
    <h3 id="data-in-packages">Data in Packages</h3>
    <h3 id="tools-and-services">Tools and Services</h3>
    <p><strong>Text Editors and IDEs</strong></p>
    <p>By far the most popular <a href="http://en.wikibooks.org/wiki/R_Programming/Settings#Integrated_development_environment">integrated development environment (IDE)</a> for R is <a href="http://www.rstudio.com/">RStudio</a>, which is an open-source product available with both commercial and AGPL licensing. It can be run both locally and on a remote server. <pkg>rstudioapi</pkg> facilitates interaction from RStudio from within R.</p>
    <p><strong>Makefiles</strong></p>
    <p><a href="http://www.gnu.org/software/make/">GNU Make</a> is a tool that typically builds executable programs and libraries from source code by reading files called <code>Makefile</code>. It can be used to manage R package as well; <a href="http://github.com/ComputationalProteomicsUnit/maker">maker</a> is a <code>Makefile</code> completely devoted to R package development.</p>
    <p><strong>Version Control</strong></p>
    <p><strong>Hosting and Package Building Services</strong></p>
    <p>Many <a href="http://en.wikipedia.org/wiki/Comparison_of_open-source_software_hosting_facilities">hosting services</a> are available. Use of different hosts depends largely on what type of version control software is used to maintain a package. The most common sites are:</p>
    <ul>
    <li><a href="http://r-forge.r-project.org/">R-Forge</a>, which relies on on <a href="http://subversion.apache.org/">subversion</a>.</li>
    <li><a href="http://github.com/">GitHub</a>, <a href="http://help.github.com/articles/support-for-subversion-clients">mainly</a> which supports both Git and Mercurial <a href="http://git-scm.com/">git</a>. Packages hosted on Github can be installed directly using <code>devtools::install_github()</code>.</li>
    <li>Github supports <a href="http://en.wikipedia.org/wiki/Continuous_integration">continuous integration</a> for R packages. <a href="http://travis-ci.org/">Travis CI</a> is a popular continuous integration tools that supports Linux and OS X build environments and has native R support. Use of other CI services may require additional code and examples are available from <a href="http://github.com/craigcitro/r-travis">r-travis</a> and <a href="https://github.com/metacran/r-builder">r-builder</a>.</li>
    <li><a href="http://win-builder.r-project.org/">WinBuilder</a> is a service intended for useRs who do not have Windows available for checking and building Windows binary packages. The package sources (after an <code>R CMD check</code>) can be uploaded via html form or passive ftp in binary mode; after checking/building a mail will be sent to the <code>Maintainer</code> with links to the package zip file and logs for download/inspection. <a href="http://www.appveyor.com/">Appveyor</a> is a continuous integration service that offers a Windows build environment.</li>
    <li>Some packages, especially some that are no longer under active development, remain hosted on <a href="https://code.google.com/">Google Code</a>. This service is closed to new projects, however, and will shut down in January 2016.</li>
    </ul>
  </info>
  <packagelist>
    <pkg priority="core">devtools</pkg>
    <pkg>aoos</pkg>
    <pkg>aprof</pkg>
    <pkg>codetools</pkg>
    <pkg>gWidgets2</pkg>
    <pkg>inline</pkg>
    <pkg>js</pkg>
    <pkg>knitr</pkg>
    <pkg>lazyeval</pkg>
    <pkg>magrittr</pkg>
    <pkg>microbenchmark</pkg>
    <pkg>pipeR</pkg>
    <pkg>pkgKitten</pkg>
    <pkg>profr</pkg>
    <pkg>proftools</pkg>
    <pkg>qtbase</pkg>
    <pkg>R.methodsS3</pkg>
    <pkg>R.oo</pkg>
    <pkg>R6</pkg>
    <pkg>rbenchmark</pkg>
    <pkg>Rcpp</pkg>
    <pkg>Rd2roxygen</pkg>
    <pkg>Rdpack</pkg>
    <pkg>rJava</pkg>
    <pkg>rJython</pkg>
    <pkg>roxygen2</pkg>
    <pkg>rPython</pkg>
    <pkg>rstudioapi</pkg>
    <pkg>RUnit</pkg>
    <pkg>Shiny</pkg>
    <pkg>sos</pkg>
    <pkg>svUnit</pkg>
    <pkg>tcltk2</pkg>
    <pkg>testthat</pkg>
    <pkg>V8</pkg>
  </packagelist>
  <links>
    <a href="http://cran.r-project.org/doc/manuals/R-exts.html">[Manual] "Writing R Extension" by R-core team </a>
    <a href="http://cran.r-project.org/doc/contrib/Leisch-CreatingPackages.pdf">[Tutorial] "Creating R Packages: A Tutorial" by Friedrich Leisch </a>
    <a href="http://www.springer.com/mathematics/computational+science+%26+engineering/book/978-0-387-75935-7">[Book] "Software for Data Analysis" by John Chambers</a>
    <a href="http://adv-r.had.co.nz">[Book] "Advanced R" by Hadley Wickham</a>
    <a href="http://r-pkgs.had.co.nz/">[Book] "R packages" by Hadley  Wickham</a>
  </links>
</CRANTaskView>
